#summary How people are using Hamcrest matchers
#labels Featured,Category-Users


== Mock objects with jMock2 ==

Hamcrest was originally spawned from the Constraints code in jMock1 (which came from the Predicates code in !DynaMock. The latest version of jMock (jMock2) now uses Hamcrest directly to allow for precise expectations of arguments to be specified.

{{{
// Expect one call to mockThing.doSomething(String) with a string containing "hello". 
one(mockThing).doSomething(with(stringContaining("hello")));

// Expect mockThing.doSomething(String) to never be called with a null string.
never(mockThing).doSomething(with(aNull(String.class)));
}}}

  * Project: http://jmock.org
!  * Matcher docs: http://jmock.org/matchers.html

== Using Hamcrest for Iterators ==

Håkan Råberg has blogged about how Hamcrest can be used to create an API to make it easy to select/detect/reject elements from a list that using matchers.

{{{
List numbers = Arrays.asList(-1, 0, 1, 2);
print("detect int: " + detect(numbers, greaterThan(0)));
}}}

He then further extended this, using CGLib, to create a query API on custom domain objects.

{{{
List<Person> employees = ...;
List<Integer> allAges = collect(from(employees).getAge());
List<Person> allBosses = collect(from(employees).getDepartment().getBoss());
List<Person> allAccountants = select(from(employees).getDepartment().getName(), equalTo("Accounts"));
}}}

  * Blog post: http://jroller.com/page/ghettoJedi?entry=using_hamcrest_for_iterators

== Record-based Text File Processing with GetInLine ==

!GetInLine is a simple embedded Java DSL for writing applications that process record-based type files.

 * Project: http://sourceforge.net/projects/getinline
 * Blog post: http://www.cocking.co.uk/blog/2006/10/dsl-for-file-processing-getinline.html

== Behavior Driven Development with JDave ==

Dave is a BDD framework for Java. It is inspired by rspec and integrates jMock2 as mocking framework and Hamcrest as matching library. 

Expectations are set using specify() method.

{{{
specify(persons.get(0), is(Person.class));
specify(persons, where(new Each<Person>() {{ matches(item.getAge(), is(greaterThan(30))); }}));
}}}

  * Project: http://www.jdave.org/
  * Example: http://svn.laughingpanda.org/svn/jdave/trunk/jdave-examples/src/test/jdave/examples/HamcrestSampleSpec.java

== Web Testing ==

Robert Chatley has been combining Hamcrest with [http://code.google.com/p/webdriver/ WebDriver] in a [https://lift.dev.java.net/ LiFT]-like way to do web-testing.

{{{
public void testHasLotsOfLinks() throws Exception {
  goTo("http://some/url");
   
  assertPresenceOf(greaterThan(15), links());
  assertPresenceOf(atLeast(1), link().with(text(equalTo("Sign in"))));

  clickOn(link().with(text(equalTo("Sign in"))));

  assertPresenceOf(exactly(1), title().with(text(equalTo("Sign in page"))));		
}
}}}

== Other Ideas ==

These are other uses of Hamcrest we've heard of in passing.

  * Robert Chatley has been using matchers to implement filters in logging infrastructure.
  * Nat Pryce has been using it to write GUI tests - to find matching components that appear within some timeout.

Doing something else with Hamcrest? [http://groups.google.com/group/hamcrest-java Let us know!]
